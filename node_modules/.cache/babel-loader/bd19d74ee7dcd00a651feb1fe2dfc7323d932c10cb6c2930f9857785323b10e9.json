{"ast":null,"code":"var _jsxFileName = \"/Users/saurabhpatel/self-learn-react/src/theme/ThemeContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, createContext, useContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext({\n  theme: \"light\",\n  toggleTheme: () => {}\n});\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = useState(localStorage.getItem('theme') || \"light\");\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n  };\n  useEffect(() => {\n    const handleSystemThemeChange = () => {\n      const prefersColorScheme = window.matchMedia('(prefers-color-scheme: dark)');\n      setTheme(prefersColorScheme.matches ? 'dark' : 'light'); // Respect system preference initially \n    };\n    window.addEventListener('storage', handleSystemThemeChange); // Listen for theme changes in localStorage \n    if (theme === 'dark') {\n      document.documentElement.style.setProperty('--background-color', 'black');\n      document.documentElement.style.setProperty('--text-color', 'white');\n    } else {\n      document.documentElement.style.setProperty('--background-color', 'white');\n      document.documentElement.style.setProperty('--text-color', 'black');\n    }\n    return () => {\n      window.removeEventListener('storage', handleSystemThemeChange);\n    };\n  }, [theme]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"Bfr2HuzOkvCtDvza4JOTR3M0VgY=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  return useContext(ThemeContext);\n};\n_s2(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","useState","useEffect","createContext","useContext","jsxDEV","_jsxDEV","ThemeContext","theme","toggleTheme","ThemeProvider","children","_s","setTheme","localStorage","getItem","newTheme","setItem","handleSystemThemeChange","prefersColorScheme","window","matchMedia","matches","addEventListener","document","documentElement","style","setProperty","removeEventListener","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","$RefreshReg$"],"sources":["/Users/saurabhpatel/self-learn-react/src/theme/ThemeContext.jsx"],"sourcesContent":["import React, { useState, useEffect, createContext, useContext } from \"react\"; \n\nconst ThemeContext = createContext( { theme: \"light\", toggleTheme: () => {} } ); \nexport const ThemeProvider = ({ children }) => { \n    const [theme, setTheme] = useState(localStorage.getItem('theme') || \"light\"); \n    const toggleTheme = () => { const newTheme = theme === \"light\" ? \"dark\" : \"light\"; \n    setTheme(newTheme); localStorage.setItem('theme', newTheme); }; \n    useEffect(() => { \n        const handleSystemThemeChange = () => { \n            const prefersColorScheme = window.matchMedia('(prefers-color-scheme: dark)'); \n            setTheme(prefersColorScheme.matches ? 'dark' : 'light'); // Respect system preference initially \n        }; window.addEventListener('storage', handleSystemThemeChange); // Listen for theme changes in localStorage \n        if (theme === 'dark') { \n            document.documentElement.style.setProperty('--background-color', 'black'); \n            document.documentElement.style.setProperty('--text-color', 'white'); \n        } \n        else { \n            document.documentElement.style.setProperty('--background-color', 'white'); \n            document.documentElement.style.setProperty('--text-color', 'black'); } \n            \n    return () => { window.removeEventListener('storage', handleSystemThemeChange); \n}; }, [theme]); \nreturn (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n        \n         {children} \n         </ThemeContext.Provider> \n         ); } \n         export const useTheme = () => useContext(ThemeContext);"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,YAAY,gBAAGJ,aAAa,CAAE;EAAEK,KAAK,EAAE,OAAO;EAAEC,WAAW,EAAEA,CAAA,KAAM,CAAC;AAAE,CAAE,CAAC;AAC/E,OAAO,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACJ,KAAK,EAAEK,QAAQ,CAAC,GAAGZ,QAAQ,CAACa,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC;EAC5E,MAAMN,WAAW,GAAGA,CAAA,KAAM;IAAE,MAAMO,QAAQ,GAAGR,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;IACjFK,QAAQ,CAACG,QAAQ,CAAC;IAAEF,YAAY,CAACG,OAAO,CAAC,OAAO,EAAED,QAAQ,CAAC;EAAE,CAAC;EAC9Dd,SAAS,CAAC,MAAM;IACZ,MAAMgB,uBAAuB,GAAGA,CAAA,KAAM;MAClC,MAAMC,kBAAkB,GAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC;MAC5ER,QAAQ,CAACM,kBAAkB,CAACG,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC;IAC7D,CAAC;IAAEF,MAAM,CAACG,gBAAgB,CAAC,SAAS,EAAEL,uBAAuB,CAAC,CAAC,CAAC;IAChE,IAAIV,KAAK,KAAK,MAAM,EAAE;MAClBgB,QAAQ,CAACC,eAAe,CAACC,KAAK,CAACC,WAAW,CAAC,oBAAoB,EAAE,OAAO,CAAC;MACzEH,QAAQ,CAACC,eAAe,CAACC,KAAK,CAACC,WAAW,CAAC,cAAc,EAAE,OAAO,CAAC;IACvE,CAAC,MACI;MACDH,QAAQ,CAACC,eAAe,CAACC,KAAK,CAACC,WAAW,CAAC,oBAAoB,EAAE,OAAO,CAAC;MACzEH,QAAQ,CAACC,eAAe,CAACC,KAAK,CAACC,WAAW,CAAC,cAAc,EAAE,OAAO,CAAC;IAAE;IAE7E,OAAO,MAAM;MAAEP,MAAM,CAACQ,mBAAmB,CAAC,SAAS,EAAEV,uBAAuB,CAAC;IACjF,CAAC;EAAE,CAAC,EAAE,CAACV,KAAK,CAAC,CAAC;EACd,oBACIF,OAAA,CAACC,YAAY,CAACsB,QAAQ;IAACC,KAAK,EAAE;MAAEtB,KAAK;MAAEC;IAAY,CAAE;IAAAE,QAAA,EAE/CA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AACrB,CAAC;AAAAtB,EAAA,CAxBAF,aAAa;AAAAyB,EAAA,GAAbzB,aAAa;AAyBjB,OAAO,MAAM0B,QAAQ,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMjC,UAAU,CAACG,YAAY,CAAC;AAAA;AAAC8B,GAAA,CAA1CD,QAAQ;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}