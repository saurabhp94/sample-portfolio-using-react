{"ast":null,"code":"import * as React from 'react';\nimport { useEffect } from 'react';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nvar observerMap = new Map();\nvar RootIds = new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== undefined;\n  }).map(function (key) {\n    return key + \"_\" + (key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = observerMap.get(id);\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    observerMap.set(id, instance);\n  }\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\nfunction observe(element, callback, options, fallbackInView) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (fallbackInView === void 0) {\n    fallbackInView = unsupportedValue;\n  }\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    var bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return function () {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n  var _createObserver = createObserver(options),\n    id = _createObserver.id,\n    observer = _createObserver.observer,\n    elements = _createObserver.elements; // Register the callback listener for this element\n\n  var callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements[\"delete\"](element);\n      observer.unobserve(element);\n    }\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap[\"delete\"](id);\n    }\n  };\n}\nvar _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(InView, _React$Component);\n  function InView(props) {\n    var _this;\n    _this = _React$Component.call(this, props) || this;\n    _this.node = null;\n    _this._unobserveCb = null;\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n      _this.node = node ? node : null;\n      _this.observeNode();\n    };\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n  var _proto = InView.prototype;\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  };\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  };\n  _proto.observeNode = function observeNode() {\n    if (!this.node || this.props.skip) return;\n    var _this$props = this.props,\n      threshold = _this$props.threshold,\n      root = _this$props.root,\n      rootMargin = _this$props.rootMargin,\n      trackVisibility = _this$props.trackVisibility,\n      delay = _this$props.delay,\n      fallbackInView = _this$props.fallbackInView;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    }, fallbackInView);\n  };\n  _proto.unobserve = function unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  };\n  _proto.render = function render() {\n    if (!isPlainChildren(this.props)) {\n      var _this$state = this.state,\n        inView = _this$state.inView,\n        entry = _this$state.entry;\n      return this.props.children({\n        inView: inView,\n        entry: entry,\n        ref: this.handleNode\n      });\n    }\n    var _this$props2 = this.props,\n      children = _this$props2.children,\n      as = _this$props2.as,\n      props = _objectWithoutPropertiesLoose(_this$props2, _excluded);\n    return /*#__PURE__*/React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  };\n  return InView;\n}(React.Component);\nInView.displayName = 'InView';\nInView.defaultProps = {\n  threshold: 0,\n  triggerOnce: false,\n  initialInView: false\n};\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n    threshold = _ref.threshold,\n    delay = _ref.delay,\n    trackVisibility = _ref.trackVisibility,\n    rootMargin = _ref.rootMargin,\n    root = _ref.root,\n    triggerOnce = _ref.triggerOnce,\n    skip = _ref.skip,\n    initialInView = _ref.initialInView,\n    fallbackInView = _ref.fallbackInView;\n  var unobserve = React.useRef();\n  var _React$useState = React.useState({\n      inView: !!initialInView\n    }),\n    state = _React$useState[0],\n    setState = _React$useState[1];\n  var setRef = React.useCallback(function (node) {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n    if (skip) return;\n    if (node) {\n      unobserve.current = observe(node, function (inView, entry) {\n        setState({\n          inView: inView,\n          entry: entry\n        });\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root: root,\n        rootMargin: rootMargin,\n        threshold: threshold,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      }, fallbackInView);\n    }\n  },\n  // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  // If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  /* eslint-disable-next-line */\n\n  useEffect(function () {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\nexport { InView, InView as default, defaultFallbackInView, observe, useInView };","map":{"version":3,"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","defaultFallbackInView","inView","getRootId","root","has","get","set","toString","optionsToId","options","Object","keys","sort","filter","key","map","createObserver","id","instance","elements","thresholds","observer","IntersectionObserver","entries","forEach","entry","_elements$get","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","callbacks","push","unobserve","splice","indexOf","length","size","disconnect","isPlainChildren","props","children","InView","_React$Component","_inheritsLoose","_this","call","node","_unobserveCb","handleNode","triggerOnce","skip","setState","initialInView","observeNode","handleChange","onChange","state","_proto","prototype","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","_this$props","render","_this$state","ref","_this$props2","as","_objectWithoutPropertiesLoose","_excluded","React","createElement","_extends","Component","displayName","defaultProps","useInView","_temp","_ref","useRef","_React$useState","useState","setRef","useCallback","current","useEffect","result"],"sources":["/Users/saurabhpatel/sample-portfolio-using-react/node_modules/src/observe.ts","/Users/saurabhpatel/sample-portfolio-using-react/node_modules/src/InView.tsx","/Users/saurabhpatel/sample-portfolio-using-react/node_modules/src/useInView.tsx"],"sourcesContent":["import { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  static displayName = 'InView';\n  static defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n    initialInView: false,\n  };\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport { InViewHookResponse, IntersectionOptions } from './index';\nimport { useEffect } from 'react';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n  const setRef = React.useCallback(\n    (node: Element | null) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n          fallbackInView,\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}