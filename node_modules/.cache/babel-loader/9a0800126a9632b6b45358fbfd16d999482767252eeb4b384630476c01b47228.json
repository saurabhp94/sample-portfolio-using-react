{"ast":null,"code":"import qsa from 'dom-helpers/querySelectorAll';\nimport addEventListener from 'dom-helpers/addEventListener';\nimport { useCallback, useRef, useEffect, useMemo, useContext } from 'react';\nimport * as React from 'react';\nimport { useUncontrolledProp } from 'uncontrollable';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useEventListener from '@restart/hooks/useEventListener';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownToggle, { isRoleMenu } from './DropdownToggle';\nimport DropdownItem from './DropdownItem';\nimport SelectableContext from './SelectableContext';\nimport { dataAttr } from './DataKey';\nimport useWindow from './useWindow';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction useRefWithUpdate() {\n  const forceUpdate = useForceUpdate();\n  const ref = useRef(null);\n  const attachRef = useCallback(element => {\n    ref.current = element;\n    // ensure that a menu set triggers an update for consumers\n    forceUpdate();\n  }, [forceUpdate]);\n  return [ref, attachRef];\n}\n\n/**\n * @displayName Dropdown\n * @public\n */\nfunction Dropdown(_ref) {\n  let {\n    defaultShow,\n    show: rawShow,\n    onSelect,\n    onToggle: rawOnToggle,\n    itemSelector = \"* [\".concat(dataAttr('dropdown-item'), \"]\"),\n    focusFirstItemOnShow,\n    placement = 'bottom-start',\n    children\n  } = _ref;\n  const window = useWindow();\n  const [show, onToggle] = useUncontrolledProp(rawShow, defaultShow, rawOnToggle);\n\n  // We use normal refs instead of useCallbackRef in order to populate the\n  // the value as quickly as possible, otherwise the effect to focus the element\n  // may run before the state value is set\n  const [menuRef, setMenu] = useRefWithUpdate();\n  const menuElement = menuRef.current;\n  const [toggleRef, setToggle] = useRefWithUpdate();\n  const toggleElement = toggleRef.current;\n  const lastShow = usePrevious(show);\n  const lastSourceEvent = useRef(null);\n  const focusInDropdown = useRef(false);\n  const onSelectCtx = useContext(SelectableContext);\n  const toggle = useCallback(function (nextShow, event) {\n    let source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : event == null ? void 0 : event.type;\n    onToggle(nextShow, {\n      originalEvent: event,\n      source\n    });\n  }, [onToggle]);\n  const handleSelect = useEventCallback((key, event) => {\n    onSelect == null ? void 0 : onSelect(key, event);\n    toggle(false, event, 'select');\n    if (!event.isPropagationStopped()) {\n      onSelectCtx == null ? void 0 : onSelectCtx(key, event);\n    }\n  });\n  const context = useMemo(() => ({\n    toggle,\n    placement,\n    show,\n    menuElement,\n    toggleElement,\n    setMenu,\n    setToggle\n  }), [toggle, placement, show, menuElement, toggleElement, setMenu, setToggle]);\n  if (menuElement && lastShow && !show) {\n    focusInDropdown.current = menuElement.contains(menuElement.ownerDocument.activeElement);\n  }\n  const focusToggle = useEventCallback(() => {\n    if (toggleElement && toggleElement.focus) {\n      toggleElement.focus();\n    }\n  });\n  const maybeFocusFirst = useEventCallback(() => {\n    const type = lastSourceEvent.current;\n    let focusType = focusFirstItemOnShow;\n    if (focusType == null) {\n      focusType = menuRef.current && isRoleMenu(menuRef.current) ? 'keyboard' : false;\n    }\n    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {\n      return;\n    }\n    const first = qsa(menuRef.current, itemSelector)[0];\n    if (first && first.focus) first.focus();\n  });\n  useEffect(() => {\n    if (show) maybeFocusFirst();else if (focusInDropdown.current) {\n      focusInDropdown.current = false;\n      focusToggle();\n    }\n    // only `show` should be changing\n  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);\n  useEffect(() => {\n    lastSourceEvent.current = null;\n  });\n  const getNextFocusedChild = (current, offset) => {\n    if (!menuRef.current) return null;\n    const items = qsa(menuRef.current, itemSelector);\n    let index = items.indexOf(current) + offset;\n    index = Math.max(0, Math.min(index, items.length));\n    return items[index];\n  };\n  useEventListener(useCallback(() => window.document, [window]), 'keydown', event => {\n    var _menuRef$current, _toggleRef$current;\n    const {\n      key\n    } = event;\n    const target = event.target;\n    const fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);\n    const fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target);\n\n    // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n    // in inscrutability\n    const isInput = /input|textarea/i.test(target.tagName);\n    if (isInput && (key === ' ' || key !== 'Escape' && fromMenu || key === 'Escape' && target.type === 'search')) {\n      return;\n    }\n    if (!fromMenu && !fromToggle) {\n      return;\n    }\n    if (key === 'Tab' && (!menuRef.current || !show)) {\n      return;\n    }\n    lastSourceEvent.current = event.type;\n    const meta = {\n      originalEvent: event,\n      source: event.type\n    };\n    switch (key) {\n      case 'ArrowUp':\n        {\n          const next = getNextFocusedChild(target, -1);\n          if (next && next.focus) next.focus();\n          event.preventDefault();\n          return;\n        }\n      case 'ArrowDown':\n        event.preventDefault();\n        if (!show) {\n          onToggle(true, meta);\n        } else {\n          const next = getNextFocusedChild(target, 1);\n          if (next && next.focus) next.focus();\n        }\n        return;\n      case 'Tab':\n        // on keydown the target is the element being tabbed FROM, we need that\n        // to know if this event is relevant to this dropdown (e.g. in this menu).\n        // On `keyup` the target is the element being tagged TO which we use to check\n        // if focus has left the menu\n        addEventListener(target.ownerDocument, 'keyup', e => {\n          var _menuRef$current2;\n          if (e.key === 'Tab' && !e.target || !((_menuRef$current2 = menuRef.current) != null && _menuRef$current2.contains(e.target))) {\n            onToggle(false, meta);\n          }\n        }, {\n          once: true\n        });\n        break;\n      case 'Escape':\n        if (key === 'Escape') {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n        onToggle(false, meta);\n        break;\n      default:\n    }\n  });\n  return /*#__PURE__*/_jsx(SelectableContext.Provider, {\n    value: handleSelect,\n    children: /*#__PURE__*/_jsx(DropdownContext.Provider, {\n      value: context,\n      children: children\n    })\n  });\n}\nDropdown.displayName = 'Dropdown';\nDropdown.Menu = DropdownMenu;\nDropdown.Toggle = DropdownToggle;\nDropdown.Item = DropdownItem;\nexport default Dropdown;","map":{"version":3,"names":["qsa","addEventListener","useCallback","useRef","useEffect","useMemo","useContext","React","useUncontrolledProp","usePrevious","useForceUpdate","useEventListener","useEventCallback","DropdownContext","DropdownMenu","DropdownToggle","isRoleMenu","DropdownItem","SelectableContext","dataAttr","useWindow","jsx","_jsx","useRefWithUpdate","forceUpdate","ref","attachRef","element","current","Dropdown","_ref","defaultShow","show","rawShow","onSelect","onToggle","rawOnToggle","itemSelector","concat","focusFirstItemOnShow","placement","children","window","menuRef","setMenu","menuElement","toggleRef","setToggle","toggleElement","lastShow","lastSourceEvent","focusInDropdown","onSelectCtx","toggle","nextShow","event","source","arguments","length","undefined","type","originalEvent","handleSelect","key","isPropagationStopped","context","contains","ownerDocument","activeElement","focusToggle","focus","maybeFocusFirst","focusType","test","first","getNextFocusedChild","offset","items","index","indexOf","Math","max","min","document","_menuRef$current","_toggleRef$current","target","fromMenu","fromToggle","isInput","tagName","meta","next","preventDefault","e","_menuRef$current2","once","stopPropagation","Provider","value","displayName","Menu","Toggle","Item"],"sources":["/Users/saurabhpatel/sample-portfolio-using-react/node_modules/@restart/ui/esm/Dropdown.js"],"sourcesContent":["import qsa from 'dom-helpers/querySelectorAll';\nimport addEventListener from 'dom-helpers/addEventListener';\nimport { useCallback, useRef, useEffect, useMemo, useContext } from 'react';\nimport * as React from 'react';\nimport { useUncontrolledProp } from 'uncontrollable';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useEventListener from '@restart/hooks/useEventListener';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownToggle, { isRoleMenu } from './DropdownToggle';\nimport DropdownItem from './DropdownItem';\nimport SelectableContext from './SelectableContext';\nimport { dataAttr } from './DataKey';\nimport useWindow from './useWindow';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction useRefWithUpdate() {\n  const forceUpdate = useForceUpdate();\n  const ref = useRef(null);\n  const attachRef = useCallback(element => {\n    ref.current = element;\n    // ensure that a menu set triggers an update for consumers\n    forceUpdate();\n  }, [forceUpdate]);\n  return [ref, attachRef];\n}\n\n/**\n * @displayName Dropdown\n * @public\n */\nfunction Dropdown({\n  defaultShow,\n  show: rawShow,\n  onSelect,\n  onToggle: rawOnToggle,\n  itemSelector = `* [${dataAttr('dropdown-item')}]`,\n  focusFirstItemOnShow,\n  placement = 'bottom-start',\n  children\n}) {\n  const window = useWindow();\n  const [show, onToggle] = useUncontrolledProp(rawShow, defaultShow, rawOnToggle);\n\n  // We use normal refs instead of useCallbackRef in order to populate the\n  // the value as quickly as possible, otherwise the effect to focus the element\n  // may run before the state value is set\n  const [menuRef, setMenu] = useRefWithUpdate();\n  const menuElement = menuRef.current;\n  const [toggleRef, setToggle] = useRefWithUpdate();\n  const toggleElement = toggleRef.current;\n  const lastShow = usePrevious(show);\n  const lastSourceEvent = useRef(null);\n  const focusInDropdown = useRef(false);\n  const onSelectCtx = useContext(SelectableContext);\n  const toggle = useCallback((nextShow, event, source = event == null ? void 0 : event.type) => {\n    onToggle(nextShow, {\n      originalEvent: event,\n      source\n    });\n  }, [onToggle]);\n  const handleSelect = useEventCallback((key, event) => {\n    onSelect == null ? void 0 : onSelect(key, event);\n    toggle(false, event, 'select');\n    if (!event.isPropagationStopped()) {\n      onSelectCtx == null ? void 0 : onSelectCtx(key, event);\n    }\n  });\n  const context = useMemo(() => ({\n    toggle,\n    placement,\n    show,\n    menuElement,\n    toggleElement,\n    setMenu,\n    setToggle\n  }), [toggle, placement, show, menuElement, toggleElement, setMenu, setToggle]);\n  if (menuElement && lastShow && !show) {\n    focusInDropdown.current = menuElement.contains(menuElement.ownerDocument.activeElement);\n  }\n  const focusToggle = useEventCallback(() => {\n    if (toggleElement && toggleElement.focus) {\n      toggleElement.focus();\n    }\n  });\n  const maybeFocusFirst = useEventCallback(() => {\n    const type = lastSourceEvent.current;\n    let focusType = focusFirstItemOnShow;\n    if (focusType == null) {\n      focusType = menuRef.current && isRoleMenu(menuRef.current) ? 'keyboard' : false;\n    }\n    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {\n      return;\n    }\n    const first = qsa(menuRef.current, itemSelector)[0];\n    if (first && first.focus) first.focus();\n  });\n  useEffect(() => {\n    if (show) maybeFocusFirst();else if (focusInDropdown.current) {\n      focusInDropdown.current = false;\n      focusToggle();\n    }\n    // only `show` should be changing\n  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);\n  useEffect(() => {\n    lastSourceEvent.current = null;\n  });\n  const getNextFocusedChild = (current, offset) => {\n    if (!menuRef.current) return null;\n    const items = qsa(menuRef.current, itemSelector);\n    let index = items.indexOf(current) + offset;\n    index = Math.max(0, Math.min(index, items.length));\n    return items[index];\n  };\n  useEventListener(useCallback(() => window.document, [window]), 'keydown', event => {\n    var _menuRef$current, _toggleRef$current;\n    const {\n      key\n    } = event;\n    const target = event.target;\n    const fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);\n    const fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target);\n\n    // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n    // in inscrutability\n    const isInput = /input|textarea/i.test(target.tagName);\n    if (isInput && (key === ' ' || key !== 'Escape' && fromMenu || key === 'Escape' && target.type === 'search')) {\n      return;\n    }\n    if (!fromMenu && !fromToggle) {\n      return;\n    }\n    if (key === 'Tab' && (!menuRef.current || !show)) {\n      return;\n    }\n    lastSourceEvent.current = event.type;\n    const meta = {\n      originalEvent: event,\n      source: event.type\n    };\n    switch (key) {\n      case 'ArrowUp':\n        {\n          const next = getNextFocusedChild(target, -1);\n          if (next && next.focus) next.focus();\n          event.preventDefault();\n          return;\n        }\n      case 'ArrowDown':\n        event.preventDefault();\n        if (!show) {\n          onToggle(true, meta);\n        } else {\n          const next = getNextFocusedChild(target, 1);\n          if (next && next.focus) next.focus();\n        }\n        return;\n      case 'Tab':\n        // on keydown the target is the element being tabbed FROM, we need that\n        // to know if this event is relevant to this dropdown (e.g. in this menu).\n        // On `keyup` the target is the element being tagged TO which we use to check\n        // if focus has left the menu\n        addEventListener(target.ownerDocument, 'keyup', e => {\n          var _menuRef$current2;\n          if (e.key === 'Tab' && !e.target || !((_menuRef$current2 = menuRef.current) != null && _menuRef$current2.contains(e.target))) {\n            onToggle(false, meta);\n          }\n        }, {\n          once: true\n        });\n        break;\n      case 'Escape':\n        if (key === 'Escape') {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n        onToggle(false, meta);\n        break;\n      default:\n    }\n  });\n  return /*#__PURE__*/_jsx(SelectableContext.Provider, {\n    value: handleSelect,\n    children: /*#__PURE__*/_jsx(DropdownContext.Provider, {\n      value: context,\n      children: children\n    })\n  });\n}\nDropdown.displayName = 'Dropdown';\nDropdown.Menu = DropdownMenu;\nDropdown.Toggle = DropdownToggle;\nDropdown.Item = DropdownItem;\nexport default Dropdown;"],"mappings":"AAAA,OAAOA,GAAG,MAAM,8BAA8B;AAC9C,OAAOC,gBAAgB,MAAM,8BAA8B;AAC3D,SAASC,WAAW,EAAEC,MAAM,EAAEC,SAAS,EAAEC,OAAO,EAAEC,UAAU,QAAQ,OAAO;AAC3E,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,mBAAmB,QAAQ,gBAAgB;AACpD,OAAOC,WAAW,MAAM,4BAA4B;AACpD,OAAOC,cAAc,MAAM,+BAA+B;AAC1D,OAAOC,gBAAgB,MAAM,iCAAiC;AAC9D,OAAOC,gBAAgB,MAAM,iCAAiC;AAC9D,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,cAAc,IAAIC,UAAU,QAAQ,kBAAkB;AAC7D,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,SAASC,QAAQ,QAAQ,WAAW;AACpC,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,gBAAgBA,CAAA,EAAG;EAC1B,MAAMC,WAAW,GAAGd,cAAc,CAAC,CAAC;EACpC,MAAMe,GAAG,GAAGtB,MAAM,CAAC,IAAI,CAAC;EACxB,MAAMuB,SAAS,GAAGxB,WAAW,CAACyB,OAAO,IAAI;IACvCF,GAAG,CAACG,OAAO,GAAGD,OAAO;IACrB;IACAH,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EACjB,OAAO,CAACC,GAAG,EAAEC,SAAS,CAAC;AACzB;;AAEA;AACA;AACA;AACA;AACA,SAASG,QAAQA,CAAAC,IAAA,EASd;EAAA,IATe;IAChBC,WAAW;IACXC,IAAI,EAAEC,OAAO;IACbC,QAAQ;IACRC,QAAQ,EAAEC,WAAW;IACrBC,YAAY,SAAAC,MAAA,CAASnB,QAAQ,CAAC,eAAe,CAAC,MAAG;IACjDoB,oBAAoB;IACpBC,SAAS,GAAG,cAAc;IAC1BC;EACF,CAAC,GAAAX,IAAA;EACC,MAAMY,MAAM,GAAGtB,SAAS,CAAC,CAAC;EAC1B,MAAM,CAACY,IAAI,EAAEG,QAAQ,CAAC,GAAG3B,mBAAmB,CAACyB,OAAO,EAAEF,WAAW,EAAEK,WAAW,CAAC;;EAE/E;EACA;EACA;EACA,MAAM,CAACO,OAAO,EAAEC,OAAO,CAAC,GAAGrB,gBAAgB,CAAC,CAAC;EAC7C,MAAMsB,WAAW,GAAGF,OAAO,CAACf,OAAO;EACnC,MAAM,CAACkB,SAAS,EAAEC,SAAS,CAAC,GAAGxB,gBAAgB,CAAC,CAAC;EACjD,MAAMyB,aAAa,GAAGF,SAAS,CAAClB,OAAO;EACvC,MAAMqB,QAAQ,GAAGxC,WAAW,CAACuB,IAAI,CAAC;EAClC,MAAMkB,eAAe,GAAG/C,MAAM,CAAC,IAAI,CAAC;EACpC,MAAMgD,eAAe,GAAGhD,MAAM,CAAC,KAAK,CAAC;EACrC,MAAMiD,WAAW,GAAG9C,UAAU,CAACY,iBAAiB,CAAC;EACjD,MAAMmC,MAAM,GAAGnD,WAAW,CAAC,UAACoD,QAAQ,EAAEC,KAAK,EAAmD;IAAA,IAAjDC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGF,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACK,IAAI;IACvFzB,QAAQ,CAACmB,QAAQ,EAAE;MACjBO,aAAa,EAAEN,KAAK;MACpBC;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACrB,QAAQ,CAAC,CAAC;EACd,MAAM2B,YAAY,GAAGlD,gBAAgB,CAAC,CAACmD,GAAG,EAAER,KAAK,KAAK;IACpDrB,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAAC6B,GAAG,EAAER,KAAK,CAAC;IAChDF,MAAM,CAAC,KAAK,EAAEE,KAAK,EAAE,QAAQ,CAAC;IAC9B,IAAI,CAACA,KAAK,CAACS,oBAAoB,CAAC,CAAC,EAAE;MACjCZ,WAAW,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,WAAW,CAACW,GAAG,EAAER,KAAK,CAAC;IACxD;EACF,CAAC,CAAC;EACF,MAAMU,OAAO,GAAG5D,OAAO,CAAC,OAAO;IAC7BgD,MAAM;IACNb,SAAS;IACTR,IAAI;IACJa,WAAW;IACXG,aAAa;IACbJ,OAAO;IACPG;EACF,CAAC,CAAC,EAAE,CAACM,MAAM,EAAEb,SAAS,EAAER,IAAI,EAAEa,WAAW,EAAEG,aAAa,EAAEJ,OAAO,EAAEG,SAAS,CAAC,CAAC;EAC9E,IAAIF,WAAW,IAAII,QAAQ,IAAI,CAACjB,IAAI,EAAE;IACpCmB,eAAe,CAACvB,OAAO,GAAGiB,WAAW,CAACqB,QAAQ,CAACrB,WAAW,CAACsB,aAAa,CAACC,aAAa,CAAC;EACzF;EACA,MAAMC,WAAW,GAAGzD,gBAAgB,CAAC,MAAM;IACzC,IAAIoC,aAAa,IAAIA,aAAa,CAACsB,KAAK,EAAE;MACxCtB,aAAa,CAACsB,KAAK,CAAC,CAAC;IACvB;EACF,CAAC,CAAC;EACF,MAAMC,eAAe,GAAG3D,gBAAgB,CAAC,MAAM;IAC7C,MAAMgD,IAAI,GAAGV,eAAe,CAACtB,OAAO;IACpC,IAAI4C,SAAS,GAAGjC,oBAAoB;IACpC,IAAIiC,SAAS,IAAI,IAAI,EAAE;MACrBA,SAAS,GAAG7B,OAAO,CAACf,OAAO,IAAIZ,UAAU,CAAC2B,OAAO,CAACf,OAAO,CAAC,GAAG,UAAU,GAAG,KAAK;IACjF;IACA,IAAI4C,SAAS,KAAK,KAAK,IAAIA,SAAS,KAAK,UAAU,IAAI,CAAC,SAAS,CAACC,IAAI,CAACb,IAAI,CAAC,EAAE;MAC5E;IACF;IACA,MAAMc,KAAK,GAAG1E,GAAG,CAAC2C,OAAO,CAACf,OAAO,EAAES,YAAY,CAAC,CAAC,CAAC,CAAC;IACnD,IAAIqC,KAAK,IAAIA,KAAK,CAACJ,KAAK,EAAEI,KAAK,CAACJ,KAAK,CAAC,CAAC;EACzC,CAAC,CAAC;EACFlE,SAAS,CAAC,MAAM;IACd,IAAI4B,IAAI,EAAEuC,eAAe,CAAC,CAAC,CAAC,KAAK,IAAIpB,eAAe,CAACvB,OAAO,EAAE;MAC5DuB,eAAe,CAACvB,OAAO,GAAG,KAAK;MAC/ByC,WAAW,CAAC,CAAC;IACf;IACA;EACF,CAAC,EAAE,CAACrC,IAAI,EAAEmB,eAAe,EAAEkB,WAAW,EAAEE,eAAe,CAAC,CAAC;EACzDnE,SAAS,CAAC,MAAM;IACd8C,eAAe,CAACtB,OAAO,GAAG,IAAI;EAChC,CAAC,CAAC;EACF,MAAM+C,mBAAmB,GAAGA,CAAC/C,OAAO,EAAEgD,MAAM,KAAK;IAC/C,IAAI,CAACjC,OAAO,CAACf,OAAO,EAAE,OAAO,IAAI;IACjC,MAAMiD,KAAK,GAAG7E,GAAG,CAAC2C,OAAO,CAACf,OAAO,EAAES,YAAY,CAAC;IAChD,IAAIyC,KAAK,GAAGD,KAAK,CAACE,OAAO,CAACnD,OAAO,CAAC,GAAGgD,MAAM;IAC3CE,KAAK,GAAGE,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAACJ,KAAK,EAAED,KAAK,CAACnB,MAAM,CAAC,CAAC;IAClD,OAAOmB,KAAK,CAACC,KAAK,CAAC;EACrB,CAAC;EACDnE,gBAAgB,CAACT,WAAW,CAAC,MAAMwC,MAAM,CAACyC,QAAQ,EAAE,CAACzC,MAAM,CAAC,CAAC,EAAE,SAAS,EAAEa,KAAK,IAAI;IACjF,IAAI6B,gBAAgB,EAAEC,kBAAkB;IACxC,MAAM;MACJtB;IACF,CAAC,GAAGR,KAAK;IACT,MAAM+B,MAAM,GAAG/B,KAAK,CAAC+B,MAAM;IAC3B,MAAMC,QAAQ,GAAG,CAACH,gBAAgB,GAAGzC,OAAO,CAACf,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGwD,gBAAgB,CAAClB,QAAQ,CAACoB,MAAM,CAAC;IAC1G,MAAME,UAAU,GAAG,CAACH,kBAAkB,GAAGvC,SAAS,CAAClB,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGyD,kBAAkB,CAACnB,QAAQ,CAACoB,MAAM,CAAC;;IAElH;IACA;IACA,MAAMG,OAAO,GAAG,iBAAiB,CAAChB,IAAI,CAACa,MAAM,CAACI,OAAO,CAAC;IACtD,IAAID,OAAO,KAAK1B,GAAG,KAAK,GAAG,IAAIA,GAAG,KAAK,QAAQ,IAAIwB,QAAQ,IAAIxB,GAAG,KAAK,QAAQ,IAAIuB,MAAM,CAAC1B,IAAI,KAAK,QAAQ,CAAC,EAAE;MAC5G;IACF;IACA,IAAI,CAAC2B,QAAQ,IAAI,CAACC,UAAU,EAAE;MAC5B;IACF;IACA,IAAIzB,GAAG,KAAK,KAAK,KAAK,CAACpB,OAAO,CAACf,OAAO,IAAI,CAACI,IAAI,CAAC,EAAE;MAChD;IACF;IACAkB,eAAe,CAACtB,OAAO,GAAG2B,KAAK,CAACK,IAAI;IACpC,MAAM+B,IAAI,GAAG;MACX9B,aAAa,EAAEN,KAAK;MACpBC,MAAM,EAAED,KAAK,CAACK;IAChB,CAAC;IACD,QAAQG,GAAG;MACT,KAAK,SAAS;QACZ;UACE,MAAM6B,IAAI,GAAGjB,mBAAmB,CAACW,MAAM,EAAE,CAAC,CAAC,CAAC;UAC5C,IAAIM,IAAI,IAAIA,IAAI,CAACtB,KAAK,EAAEsB,IAAI,CAACtB,KAAK,CAAC,CAAC;UACpCf,KAAK,CAACsC,cAAc,CAAC,CAAC;UACtB;QACF;MACF,KAAK,WAAW;QACdtC,KAAK,CAACsC,cAAc,CAAC,CAAC;QACtB,IAAI,CAAC7D,IAAI,EAAE;UACTG,QAAQ,CAAC,IAAI,EAAEwD,IAAI,CAAC;QACtB,CAAC,MAAM;UACL,MAAMC,IAAI,GAAGjB,mBAAmB,CAACW,MAAM,EAAE,CAAC,CAAC;UAC3C,IAAIM,IAAI,IAAIA,IAAI,CAACtB,KAAK,EAAEsB,IAAI,CAACtB,KAAK,CAAC,CAAC;QACtC;QACA;MACF,KAAK,KAAK;QACR;QACA;QACA;QACA;QACArE,gBAAgB,CAACqF,MAAM,CAACnB,aAAa,EAAE,OAAO,EAAE2B,CAAC,IAAI;UACnD,IAAIC,iBAAiB;UACrB,IAAID,CAAC,CAAC/B,GAAG,KAAK,KAAK,IAAI,CAAC+B,CAAC,CAACR,MAAM,IAAI,EAAE,CAACS,iBAAiB,GAAGpD,OAAO,CAACf,OAAO,KAAK,IAAI,IAAImE,iBAAiB,CAAC7B,QAAQ,CAAC4B,CAAC,CAACR,MAAM,CAAC,CAAC,EAAE;YAC5HnD,QAAQ,CAAC,KAAK,EAAEwD,IAAI,CAAC;UACvB;QACF,CAAC,EAAE;UACDK,IAAI,EAAE;QACR,CAAC,CAAC;QACF;MACF,KAAK,QAAQ;QACX,IAAIjC,GAAG,KAAK,QAAQ,EAAE;UACpBR,KAAK,CAACsC,cAAc,CAAC,CAAC;UACtBtC,KAAK,CAAC0C,eAAe,CAAC,CAAC;QACzB;QACA9D,QAAQ,CAAC,KAAK,EAAEwD,IAAI,CAAC;QACrB;MACF;IACF;EACF,CAAC,CAAC;EACF,OAAO,aAAarE,IAAI,CAACJ,iBAAiB,CAACgF,QAAQ,EAAE;IACnDC,KAAK,EAAErC,YAAY;IACnBrB,QAAQ,EAAE,aAAanB,IAAI,CAACT,eAAe,CAACqF,QAAQ,EAAE;MACpDC,KAAK,EAAElC,OAAO;MACdxB,QAAQ,EAAEA;IACZ,CAAC;EACH,CAAC,CAAC;AACJ;AACAZ,QAAQ,CAACuE,WAAW,GAAG,UAAU;AACjCvE,QAAQ,CAACwE,IAAI,GAAGvF,YAAY;AAC5Be,QAAQ,CAACyE,MAAM,GAAGvF,cAAc;AAChCc,QAAQ,CAAC0E,IAAI,GAAGtF,YAAY;AAC5B,eAAeY,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}